// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc1735.Team17352012;
import org.usfirst.frc1735.Team17352012.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton lowGear;
    public JoystickButton highGear;
    public Joystick leftDrive;
    public Joystick rightDrive;
    public JoystickButton halfSpeed;
    public JoystickButton threeQuarterSpeed;
    public JoystickButton collectorOn;
    public Joystick operator;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        operator = new Joystick(3);
        
        collectorOn = new JoystickButton(operator, 1);
        collectorOn.whileHeld(new IntakeForward());
        threeQuarterSpeed = new JoystickButton(operator, 12);
        threeQuarterSpeed.whileHeld(new DrivewithJoysticks());
        halfSpeed = new JoystickButton(operator, 10);
        halfSpeed.whileHeld(new DrivewithJoysticks());
        rightDrive = new Joystick(2);
        
        leftDrive = new Joystick(1);
        
        highGear = new JoystickButton(leftDrive, 2);
        highGear.whenReleased(new GearHigh());
        lowGear = new JoystickButton(leftDrive, 1);
        lowGear.whenReleased(new GearLow());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("ShooterForward", new ShooterForward());
        SmartDashboard.putData("ShooterOff", new ShooterOff());
        SmartDashboard.putData("ShooterReverse", new ShooterReverse());
        SmartDashboard.putData("Drive with Joysticks", new DrivewithJoysticks());
        SmartDashboard.putData("IntakeForward", new IntakeForward());
        SmartDashboard.putData("IntakeReverse", new IntakeReverse());
        SmartDashboard.putData("DeliveryForward", new DeliveryForward());
        SmartDashboard.putData("DeliveryReverse", new DeliveryReverse());
        SmartDashboard.putData("KachopDown", new KachopDown());
        SmartDashboard.putData("KachopUp", new KachopUp());
        SmartDashboard.putData("GearLow", new GearLow());
        SmartDashboard.putData("GearHigh", new GearHigh());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDrive() {
        return leftDrive;
    }
    public Joystick getRightDrive() {
        return rightDrive;
    }
    public Joystick getOperator() {
        return operator;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
